# Default values for nodejs.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
nameOverride: ''
fullnameOverride: ''

replicaCount: 1
deploymentStrategy: RollingUpdate

image:
  registry:
    url: dcr.bndigital.dev/library
    username: ''
    password: ''
  repository: 'nodejs'
  tag: 1.4.0
  pullPolicy: Always
  pullSecrets: [ ]

vcs:
  url: 'github.com'
  repository: ''
  ref: 'latest'
  commit: ''

podAnnotations: {}

podSecurityContext:
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true

volumes: [ ]
#  - name: media-library
#    path: public/uploads
#    persistence:
#      enabled: false
#      size: 2Gi
initContainers:

securityContext: {}
#  readOnlyRootFilesystem: true
#  runAsNonRoot: true
#  runAsUser: 1000
#  runAsGroup: 1000
#
service:
  name: http
  type: ClusterIP
  port: 80
  containerPort: 5000

serviceAccount:
  create: false
  name: ''

# -- Names of existing external secrets to use. Optionals for safety
secrets: [ ]

# -- Names of existing external secrets to use. Optionals for safety
configMaps: [ ]

app:
  name: app
  component: website
  instance: nodejs
  environment: staging

#  command: [ ]
#  args: [ ]
  workingDir: ''
  # -- Environment variables required for application (will be referenced to Secret)
  env: { }
#    NODE_ENV: production

database:
  enabled: false
  backup:
    enabled: false
    image: 'schickling/postgres-backup-s3:latest'
    schema: 'public'
    schedule: '@daily'

metabase:
  enabled: false
  database:
    type: postgres
    host: postgresql
    port: 5432
    dbname: metabase
    username: postgres
    password: ''
  ingress:
    enabled: false
    hosts: [  ]
    #    tls:
#      - hosts: [ ]
#        secretName: ''
    annotations:
      kubernetes.io/ingress-class: nginx
      kubernetes.io/tls-acme: 'true'

ingress:
  secretName: ''
  host: ''
  extraHosts: [ ]
  # - '*.test.local'
  path: /
  pathType: Prefix
  className: nginx
  annotations:
    { }
  tls:
    enabled: true
    issuer:
      enabled: false
      name: letsencrypt
      server: https://acme-v02.api.letsencrypt.org/directory
  uploadSize: 5m
  proxy:
    regex: true
    www: false
    paths:
#      - path: '/graphql'
#        implementation: '' # see possible keys in ingress.proxy.templates
#        pathType: Prefix
#        service:
#          name: ''
#          port: 80
    templates:
      strapi:
        path: /(admin|api|connect|config-sync|comments|content-manager|content-type-builder|graphql|graphs-builder|email|email-designer|entity-relationship-chart|i18n|import-export-content|preview-content|responsive-image|sitemap|users-permissions|upload|uploads)(.*)
        pathType: ImplementationSpecific
      api:
        path: /api
        pathType: Prefix
      graphql:
        path: /graphql
        pathType: Exact

priorityClassName: ''

healthcheck:
  host: '127.0.0.1'
  port: 5000
  path: /

livenessProbe:
  enabled: false

readinessProbe:
  enabled: true

resources:
  { }
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
#limits:
#  cpu: 150m
#  memory: 128Mi
#requests:
#  cpu: 100m
#  memory: 128Mi

nodeSelector: { }

tolerations: [ ]

affinity: { }
