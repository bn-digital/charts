{{ $fullname := include "app.fullname" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullname }}
  labels: {{ include "app.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: {{ .Values.deploymentStrategy }} {{ if eq .Values.deploymentStrategy "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: 0 {{ end }}
  selector:
    matchLabels: {{ include "app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations: {{ include "app.podAnnotations" . | indent 8 }}
      labels: {{ include "app.selectorLabels" . | nindent 8 }}
    spec: {{ with $imagePullSecrets := .Values.image.pullSecrets }}
      imagePullSecrets: {{ range $imagePullSecrets }}
        - name: {{ tpl . $ }} {{ end }} {{ end }} {{ with $volumes := .Values.volumes }}
      volumes: {{ range  $volumes }}
        - name: {{ .name }} {{ if .persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ printf "%s-%s" $fullname .name }} {{ else }}
          emptyDir: { } {{ end }} {{ end }} {{ end }} {{ with .Values.securityContext }}
      securityContext: {{ toYaml . | nindent 8 }} {{ end }} {{ with .Values.nodeSelector }}
      nodeSelector: {{ toYaml . | nindent 8 }} {{ end }} {{ with .Values.affinity }}
      affinity: {{ toYaml . | nindent 8 }} {{ end }} {{ with .Values.tolerations }}
      tolerations: {{ toYaml . | nindent 8 }} {{ end }} {{ with .Values.priorityClassName }}
      priorityClassName: {{ . }} {{ end }} {{ with .Values.serviceAccount }} {{ if or .create .name }}
      serviceAccountName: {{ if .name }} {{ .name }} {{ else }} {{ $fullname }} {{ end }} {{ else }} {{ .name }} {{ end }} {{ end }} {{ with .Values.initContainers }}
      initContainers: {{ toYaml . | nindent 6 }} {{ end }}
      containers:
        - name: {{ .Values.app.instance }}
          image: {{ printf "%s/%s:%s" .Values.image.registry.url .Values.image.repository .Values.image.tag | quote }}
          imagePullPolicy: {{ .Values.image.pullPolicy }} {{ with .Values.app.workingDir }}
          workingDir: {{ . }} {{ end }} {{ with $command := .Values.app.command }}
          command: {{ range $command }}
            - {{ . | quote }}{{ end }} {{ end }} {{ with $args := .Values.app.args  }}
          args: {{ range $args }}
            - {{ . | quote }} {{ end }} {{ end }} {{ with .Values.podSecurityContext }}
          securityContext: {{ toYaml . | nindent 12 }} {{ end }} {{ with $volumes := .Values.volumes }}
          volumeMounts: {{ range $volumes }}
            - mountPath: {{ printf "%s/%s" $.Values.app.workingDir .path }}
              name: {{ .name }} {{ end }} {{ end }}
          env:
            - name: PORT
              value: {{ .Values.service.containerPort | quote }} {{ if or .Values.app.env .Values.configMaps .Values.secrets }}
          envFrom: {{ with $secrets := .Values.secrets }} {{ range $secrets }}
            - secretRef:
                optional: true
                name: {{ tpl . $ }} {{ end }} {{ end }} {{ with $configMaps := .Values.configMaps }}  {{ range $configMaps }}
            - configMapRef:
                optional: true
                name: {{ tpl . $ }} {{ end }} {{ end }} {{ with .Values.app.env }}
            - secretRef:
                optional: true
                name: {{ $fullname }} {{ end }} {{ end }} {{ with .Values.resources }}
          resources: {{ toYaml . | nindent 12 }} {{ end }}
          ports:
            - containerPort: {{ .Values.service.containerPort }} {{ if .Values.livenessProbe.enabled }}
          livenessProbe:
            initialDelaySeconds: 15
            periodSeconds: 5
            httpGet:
              scheme: {{ if and .Values.ingress.tls.enabled .Values.ingress.host }} {{ "https" | upper }} {{ else }} {{ "http" | upper }} {{ end }}
              host:  {{ if .Values.ingress.host }} {{ .Values.ingress.host | quote }} {{ else }} {{ .Values.healthcheck.host | quote }} {{ end }}
              port: {{ if .Values.ingress.host }} {{ if .Values.ingress.tls.enabled  }} 443 {{ else }} 80 {{ end }} {{ else }} {{ .Values.service.containerPort }} {{ end }}
              path: {{ .Values.healthcheck.path }} {{ if .Values.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: 15
            tcpSocket:
              port: {{ .Values.service.containerPort }}
              host: {{ .Values.healthcheck.host | quote }} {{ end }} {{ end }}


